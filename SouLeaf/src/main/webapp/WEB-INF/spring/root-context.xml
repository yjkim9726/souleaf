<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property>
		<property name="url" value="jdbc:oracle:thin:@sonof.iptime.org:8521:xe"></property>
		<property name="username" value="SOULEAF"></property>
		<property name="password" value="SOULEAF"></property>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean>
	
	<!-- Gmail -->
  <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
    <property name="host" value="smtp.gmail.com" />
    <property name="port" value="587" />
    <property name="username" value="khprojectfinal@gmail.com" />
    <property name="password" value="baek9037856#" />
    <property name="javaMailProperties">
    <props>
      <prop key="mail.smtp.auth">true</prop>
      <prop key="mail.smtp.starttls.enable">true</prop>
    </props>
    </property>
  </bean>
	
	
	<!-- 파일업로드 관련 bean 등록, MultipartResolver -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000"></property>
		<property name="maxInMemorySize" value="100000000"></property>
	</bean>
	
	 <!-- AOP XML 방식 -->
	<!--  <bean id="log" class="com.souleaf.spring.common.LogAdvice"></bean>
	 <bean id="aroundLog" class="com.souleaf.spring.common.AroundLog"></bean>
	 <aop:config>
	 	<aop:pointcut expression="execution(* com.souleaf.spring..*Impl.*(..))" id="allPointCut"/>
		<aop:aspect ref="log">
	 		<aop:before method="printLog" pointcut-ref="allPointCut"/>
	 		<aop:after method="printLogging" pointcut-ref="allPointCut"/>
 		</aop:aspect>
 		<aop:aspect ref="aroundLog" >
 			<aop:around method="aroundLogs" pointcut-ref="allPointCut"/>
 		</aop:aspect>
	 </aop:config> -->
	 
	 <!-- 
* PointCut 표현식 정리(execution 생략)
1. * org.kh.member.model.service.*.*(..) 
 -> service패키지에 있는 모든 클래스 및 모든 메소드 ( 매개변수는 0개 이상)
2. * org.kh.member.model.service..*.*(..)
 -> service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수는 0개 이상)
3. * org.kh.member.model.service..*.*()
 -> service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수 없는 것)
4. * org.kh.member.model.service..*.*(*)
 -> service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드 (매개변수 1개)
5. * org.kh.member.model.service..*.*(Integer,..)
 -> service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드
 ( 매개변수가 1개 이상이고, 첫번째 파라미터는 정수 )
6. int org.kh.member.service..*.*(Integer,..)
 -> 리턴타입이 int이고 service패키지 및 하위 패키지에 있는 모든 클래스 및 모든 메소드
 ( 매개변수가 1개 이상이고, 첫번째 파라미터는 정수)
7. int org.kh.member.service..*Impl.*(..)
 -> 리턴타입이 int이고 service패키지 및 하위 패키지에 있는 Impl로 끝나는 클래스의 모든 메소드
 	(매개변수는 0개 이상)
 -->
	 <!--
	 AOP를 이용한 트랜잭션 처리
	 1. JDBC : Connection객체 / conn.commit(), conn.rollback() 
	 2. Mybatis : SqlSession 객체 / session.commit(), session.rollback()
	 3. Spring : TransactionManager 객체 
	 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 트랜잭션 XML 처리 -->
	<!-- <tx:attributes>의 자식 엘리먼트로 <tx:method>를 사용하는데
	이것을 이용하여 트랜잭션을 적용할 메소드를 지정할 수 있음.
	1. read-only : 읽기 전용으로 처리, 트랜잭션 관리 대상에서 제외
	2. name : 메소드 이름
	3. no-rollback-for : 트랜잭션을 롤백하지 않을 예외 지정
	4. rollback-for : 트랜잭션을 롤백할 예외 지정 -->
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="print*" read-only="true"/>
			<tx:method name="register*" rollback-for="Exception"/>
			<tx:method name="modify*" rollback-for="Exception"/>
			<tx:method name="remove*" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.souleaf.spring..*Impl.*(..))" id="serviceMethod"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
	</aop:config>
</beans>
